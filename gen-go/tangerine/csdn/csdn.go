// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package csdn

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/shuyi-tangerine/csdn/gen-go/base"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
type SaveArticleAction int64
const (
  SaveArticleAction_All SaveArticleAction = 0
  SaveArticleAction_OnlyContent SaveArticleAction = 1
)

func (p SaveArticleAction) String() string {
  switch p {
  case SaveArticleAction_All: return "All"
  case SaveArticleAction_OnlyContent: return "OnlyContent"
  }
  return "<UNSET>"
}

func SaveArticleActionFromString(s string) (SaveArticleAction, error) {
  switch s {
  case "All": return SaveArticleAction_All, nil 
  case "OnlyContent": return SaveArticleAction_OnlyContent, nil 
  }
  return SaveArticleAction(0), fmt.Errorf("not a valid SaveArticleAction string")
}


func SaveArticleActionPtr(v SaveArticleAction) *SaveArticleAction { return &v }

func (p SaveArticleAction) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SaveArticleAction) UnmarshalText(text []byte) error {
q, err := SaveArticleActionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SaveArticleAction) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SaveArticleAction(v)
return nil
}

func (p * SaveArticleAction) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ArticleId
//  - Content
//  - Title
//  - PubStatus
//  - Action
//  - Base
type SaveArticleRequest struct {
  ArticleId int64 `thrift:"articleId,1,required" db:"articleId" json:"articleId"`
  Content string `thrift:"content,2,required" db:"content" json:"content"`
  Title string `thrift:"title,3,required" db:"title" json:"title"`
  PubStatus string `thrift:"pubStatus,4,required" db:"pubStatus" json:"pubStatus"`
  Action SaveArticleAction `thrift:"action,5" db:"action" json:"action"`
  // unused fields # 6 to 254
  Base *base.RPCRequest `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewSaveArticleRequest() *SaveArticleRequest {
  return &SaveArticleRequest{
Action: 0,
}
}


func (p *SaveArticleRequest) GetArticleId() int64 {
  return p.ArticleId
}

func (p *SaveArticleRequest) GetContent() string {
  return p.Content
}

func (p *SaveArticleRequest) GetTitle() string {
  return p.Title
}

func (p *SaveArticleRequest) GetPubStatus() string {
  return p.PubStatus
}
var SaveArticleRequest_Action_DEFAULT SaveArticleAction = 0

func (p *SaveArticleRequest) GetAction() SaveArticleAction {
  return p.Action
}
var SaveArticleRequest_Base_DEFAULT *base.RPCRequest
func (p *SaveArticleRequest) GetBase() *base.RPCRequest {
  if !p.IsSetBase() {
    return SaveArticleRequest_Base_DEFAULT
  }
return p.Base
}
func (p *SaveArticleRequest) IsSetAction() bool {
  return p.Action != SaveArticleRequest_Action_DEFAULT
}

func (p *SaveArticleRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *SaveArticleRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetArticleId bool = false;
  var issetContent bool = false;
  var issetTitle bool = false;
  var issetPubStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetArticleId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetContent = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTitle = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetPubStatus = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetArticleId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ArticleId is not set"));
  }
  if !issetContent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Content is not set"));
  }
  if !issetTitle{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"));
  }
  if !issetPubStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PubStatus is not set"));
  }
  return nil
}

func (p *SaveArticleRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ArticleId = v
}
  return nil
}

func (p *SaveArticleRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *SaveArticleRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *SaveArticleRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PubStatus = v
}
  return nil
}

func (p *SaveArticleRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := SaveArticleAction(v)
  p.Action = temp
}
  return nil
}

func (p *SaveArticleRequest)  ReadField255(ctx context.Context, iprot thrift.TProtocol) error {
  p.Base = &base.RPCRequest{}
  if err := p.Base.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *SaveArticleRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SaveArticleRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField255(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SaveArticleRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "articleId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:articleId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ArticleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.articleId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:articleId: ", p), err) }
  return err
}

func (p *SaveArticleRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "content", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:content: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:content: ", p), err) }
  return err
}

func (p *SaveArticleRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *SaveArticleRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pubStatus", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pubStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PubStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubStatus (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pubStatus: ", p), err) }
  return err
}

func (p *SaveArticleRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAction() {
    if err := oprot.WriteFieldBegin(ctx, "action", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:action: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.Action)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.action (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:action: ", p), err) }
  }
  return err
}

func (p *SaveArticleRequest) writeField255(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBase() {
    if err := oprot.WriteFieldBegin(ctx, "Base", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err) }
    if err := p.Base.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err) }
  }
  return err
}

func (p *SaveArticleRequest) Equals(other *SaveArticleRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ArticleId != other.ArticleId { return false }
  if p.Content != other.Content { return false }
  if p.Title != other.Title { return false }
  if p.PubStatus != other.PubStatus { return false }
  if p.Action != other.Action { return false }
  if !p.Base.Equals(other.Base) { return false }
  return true
}

func (p *SaveArticleRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SaveArticleRequest(%+v)", *p)
}

// Attributes:
//  - Base
type SaveArticleResponse struct {
  // unused fields # 1 to 254
  Base *base.RPCResponse `thrift:"Base,255,required" db:"Base" json:"Base"`
}

func NewSaveArticleResponse() *SaveArticleResponse {
  return &SaveArticleResponse{}
}

var SaveArticleResponse_Base_DEFAULT *base.RPCResponse
func (p *SaveArticleResponse) GetBase() *base.RPCResponse {
  if !p.IsSetBase() {
    return SaveArticleResponse_Base_DEFAULT
  }
return p.Base
}
func (p *SaveArticleResponse) IsSetBase() bool {
  return p.Base != nil
}

func (p *SaveArticleResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBase bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(ctx, iprot); err != nil {
          return err
        }
        issetBase = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBase{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Base is not set"));
  }
  return nil
}

func (p *SaveArticleResponse)  ReadField255(ctx context.Context, iprot thrift.TProtocol) error {
  p.Base = &base.RPCResponse{}
  if err := p.Base.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *SaveArticleResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SaveArticleResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField255(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SaveArticleResponse) writeField255(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err) }
  if err := p.Base.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err) }
  return err
}

func (p *SaveArticleResponse) Equals(other *SaveArticleResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Base.Equals(other.Base) { return false }
  return true
}

func (p *SaveArticleResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SaveArticleResponse(%+v)", *p)
}

type CSDNHandler interface {
  // Parameters:
  //  - Req
  SaveArticle(ctx context.Context, req *SaveArticleRequest) (_r *SaveArticleResponse, _err error)
}

type CSDNHandlerClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewCSDNHandlerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CSDNHandlerClient {
  return &CSDNHandlerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCSDNHandlerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CSDNHandlerClient {
  return &CSDNHandlerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCSDNHandlerClient(c thrift.TClient) *CSDNHandlerClient {
  return &CSDNHandlerClient{
    c: c,
  }
}

func (p *CSDNHandlerClient) Client_() thrift.TClient {
  return p.c
}

func (p *CSDNHandlerClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *CSDNHandlerClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *CSDNHandlerClient) SaveArticle(ctx context.Context, req *SaveArticleRequest) (_r *SaveArticleResponse, _err error) {
  var _args0 CSDNHandlerSaveArticleArgs
  _args0.Req = req
  var _result2 CSDNHandlerSaveArticleResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "SaveArticle", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  if _ret3 := _result2.GetSuccess(); _ret3 != nil {
    return _ret3, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "SaveArticle failed: unknown result")
}

type CSDNHandlerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CSDNHandler
}

func (p *CSDNHandlerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CSDNHandlerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CSDNHandlerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCSDNHandlerProcessor(handler CSDNHandler) *CSDNHandlerProcessor {

  self4 := &CSDNHandlerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["SaveArticle"] = &cSDNHandlerProcessorSaveArticle{handler:handler}
return self4
}

func (p *CSDNHandlerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x5.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x5

}

type cSDNHandlerProcessorSaveArticle struct {
  handler CSDNHandler
}

func (p *cSDNHandlerProcessorSaveArticle) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err6 error
  args := CSDNHandlerSaveArticleArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SaveArticle", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CSDNHandlerSaveArticleResult{}
  if retval, err2 := p.handler.SaveArticle(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc7 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveArticle: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "SaveArticle", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err6 = thrift.WrapTException(err2)
    }
    if err2 := _exc7.Write(ctx, oprot); _write_err6 == nil && err2 != nil {
      _write_err6 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err6 == nil && err2 != nil {
      _write_err6 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err6 == nil && err2 != nil {
      _write_err6 = thrift.WrapTException(err2)
    }
    if _write_err6 != nil {
      return false, thrift.WrapTException(_write_err6)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "SaveArticle", thrift.REPLY, seqId); err2 != nil {
    _write_err6 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err6 == nil && err2 != nil {
    _write_err6 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err6 == nil && err2 != nil {
    _write_err6 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err6 == nil && err2 != nil {
    _write_err6 = thrift.WrapTException(err2)
  }
  if _write_err6 != nil {
    return false, thrift.WrapTException(_write_err6)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type CSDNHandlerSaveArticleArgs struct {
  Req *SaveArticleRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewCSDNHandlerSaveArticleArgs() *CSDNHandlerSaveArticleArgs {
  return &CSDNHandlerSaveArticleArgs{}
}

var CSDNHandlerSaveArticleArgs_Req_DEFAULT *SaveArticleRequest
func (p *CSDNHandlerSaveArticleArgs) GetReq() *SaveArticleRequest {
  if !p.IsSetReq() {
    return CSDNHandlerSaveArticleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CSDNHandlerSaveArticleArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CSDNHandlerSaveArticleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CSDNHandlerSaveArticleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &SaveArticleRequest{
  Action: 0,
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CSDNHandlerSaveArticleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SaveArticle_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CSDNHandlerSaveArticleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CSDNHandlerSaveArticleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CSDNHandlerSaveArticleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CSDNHandlerSaveArticleResult struct {
  Success *SaveArticleResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCSDNHandlerSaveArticleResult() *CSDNHandlerSaveArticleResult {
  return &CSDNHandlerSaveArticleResult{}
}

var CSDNHandlerSaveArticleResult_Success_DEFAULT *SaveArticleResponse
func (p *CSDNHandlerSaveArticleResult) GetSuccess() *SaveArticleResponse {
  if !p.IsSetSuccess() {
    return CSDNHandlerSaveArticleResult_Success_DEFAULT
  }
return p.Success
}
func (p *CSDNHandlerSaveArticleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CSDNHandlerSaveArticleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CSDNHandlerSaveArticleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SaveArticleResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CSDNHandlerSaveArticleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SaveArticle_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CSDNHandlerSaveArticleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CSDNHandlerSaveArticleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CSDNHandlerSaveArticleResult(%+v)", *p)
}


